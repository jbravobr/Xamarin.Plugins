{"Name":"IBM MobileFirst SDK","Id":2404,"Alias":"ibm-worklight","Description":"## IBM MobileFirst SDK\n\nWith the IBM MobileFirst Platform Foundation SDK, C# developers can build rich native enterprise grade mobile apps for iOS and Android devices by using IBM MobileFirst Platform Server.\n\n*Note:  IBM MobileFirst Platform Foundation was earlier called IBM Worklight Foundation.*\n\n#### Key Highlights\n* **Do it all by using C#**\n* Single, secure point of integration, management, and deployment that supports the full mobile app lifecycle\n* Access your enterprise backend using MobileFirst Platform Adapters\n* Enterprise grade security for your mobile applications\n* Application management and version control\n* Leverage rich analytics support of MobileFirst Platform\n* Simplified push notification management service\n* Possibility to use your own strongly-typed C# objects and async/await patterns.\n* A unified C#API for iOS and Android.\n\n###Dive In\n\nA unified API is provided for iOS and Android. You can write most of the IBM MobileFirst Platform related code in a common shared project that will be used in both the Android project and the iOS project. You can write all the asynchronous code using async/await and event listeners to make your app responsive.\n\nThe following code is a simplified subset of the code that is located in the samples. This example show how you can call an IBM MobileFirst adapter that returns a feed of news articles and is formatted for pretty printing in platform agnostic code.\n\nIn the Android Activity, instantiate the Android specific     WorklightClient object.\n\n```\n\t\t\n\t\tpublic class MainActivity : Activity\n\t\t{\n\t\t\tIWorklightClient client = Worklight.Xamarin.Android.WorklightClient.CreateInstance (this);\n\t\t}\n\t\n```\n\nIn the iOS UIViewController instantiate the iOS specific WorklightClient\n\n```\n\t\n\tpublic partial class Xtest_iOSViewController : UIViewController\n\t{\n\t\tpublic override void ViewDidLoad ()\n\t\t{\n\t\t\tbase.ViewDidLoad ();\n\t\t\tIWorklightClient client =  Worklight.Xamarin.iOS.WorklightClient.CreateInstance ();\n\t\t}\n\t}\n\t\n```\n\nAfter you created the instance of IWorklightClient, you can use it to write platform agnostic common code. You first connect to the MobileFirst Server, and register a Challenge handler for authentication. As you do so, you can write to the local logging as well as the server-based analytics logging.\n\n```\n\n\t\t//all this is common code\n\t\tpublic async Task\u003cWorklightResponse\u003e Connect()\r\n \t\t{\n \t\t\tstring appRealm = \"SampleAppRealm\";\n\t\t\tChallengeHandler customCH = new CustomChallengeHandler (appRealm);\n\t\t\tclient.RegisterChallengeHandler(customCH);\n\t\t\tWorklightResponse task = await client.Connect ();\n\t\t\t//lets log to the local client (not server)\n\t\t\tclient.Logger(\"Xamarin\").Trace (\"connection\");\n\t\t\t//write to the server the connection status\n\t\t\tclient.Analytics.Log (\"Connect response : \" + task.Success);\n\t\t\treturn task;\n\t\t}\n\n```\n\nThen invoke a procedure \n\n```\n\t\t\n\t\t//Common code\n\t\tWorklightProcedureInvocationData invocationData = new WorklightProcedureInvocationData(\"SampleHTTPAdapter\", \"getStories\", new object[] {\"technology\"});\n\t\tWorklightResponse task = await client.InvokeProcedure(invocationData);\n\t\tStringBuilder retval = new StringBuilder();\n\t\tif (task.Success)\n\t\t{\n\t\t\tJsonArray jsonArray = (JsonArray)task.ResponseJSON[\"rss\"][\"channel\"][\"item\"];\n\t\t\tforeach(JsonObject title in jsonArray)\n\t\t\t{\n\t\t\t\tSystem.Json.JsonValue titleString ;\n\t\t\t\ttitle.TryGetValue(\"title\",out titleString);\n\t\t\t\tretval.Append(titleString.ToString());\n\t\t\t\tretval.AppendLine();\n\t\t\t}\n\t\t}\n```\n\nFor more information see the sample inside the component for more details. \n\n","Version":"7.1.0.1","Summary":"Integrate your Xamarin apps with IBM MobileFirst Platform.","QuickStart":"## More Information\n\n1. [IBM Worklight Foundation home page](http://www.ibm.com/developerworks/mobile/worklight/index.html)\r\n2. [IBM Worklight Foundation Knowledge Center](http://www-01.ibm.com/support/knowledgecenter/SSZH4A_6.2.0/)\r\n3.  The C# API guide is bundled inside the component\r\n4.  The sample Xamarin solution for Android and iOS is bundled in the component\r\n\r\n## The IBM Worklight Add-in for Xamarin Studio\n\nA add-in is provided for the Xamarin Studio for IBM Worklight integration. This add-in prepares the development environment by:\n\n 1.  Creating the Worklight Server instance for the installation\r\n 2.  Creating a Worklight project for the Xamarin solution that is active\r\n 3.  Creating a Android native app configuration and a iOS app configuration in the project\r\n 4.  Allows to Start/stop the server as well as open the Worklight Console in the browser\n\n## Pre-requisites for a New Solution\n\n 1.  You need an instance of the IBM Worklight Server on the development machine.  Install Worklight CLI (Command line Interface) from the [ IBM Worklight download page](http://www.ibm.com/developerworks/mobile/worklight/download/cli.html)\n 2.  Create a Xamarin Solution\n 3.  Add a Android and/or iOS project in the solution\n 4.  Add this component to the project \r\n 5.  Install the IBM Worklight Add-in \r\n  1.  Right click on the IBM Worklight Component and click on **Open containing folder**\r\n  2.  Add the Add-in (.mpack file) by using the Add-in panel from the **component\\addin** folder\r\n 6. Click on **Menu\u003eTools\u003eIBM Worklight\u003eStart Server** - this creates the Worklight setup\r\n 7. The Worklight SDK needs a property file that contains information on how to connect to the Worklight Server. This information is pre-populated with some data (like the IP address of the server, application name etc) in the Worklight project the add-in created. Add it to the Xamarin Application projects.\r\n  1. Android: Add the \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\android\u003c SolutionName\u003e\\wlclient.properties file to the Xamarin Android **Assets** folder and set the build action to **AndroidAsset**. (e.g: \\Xtest\\worklight\\Xtest\\apps\\androidXtest\\wlclient.properties)\r\n  2. iOS: Add the \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\iOS\u003c SolutionName\u003e\\worklight.plist file to the Xamarin iOS **resources** folder and set the build action to **bundleResource** (e.g: \\Xtest\\worklight\\Xtest\\apps\\iOSXtest\\worklight.plist)\r\n 8. To use the JSONStore API, Worklight SDK needs some native files. These need to be added to the project.\n   1. Android: Add to the **Assets** folder the files from \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\android\u003c SolutionName\u003e/jsonstore/assets . Set the **BuildAction** for these files to **AndroidAsset**.\r\n   1. iOS: No action needed.\n\n**Note:** \n\nWhen you add the Worklight Xamarin Component to your project, the following DLLs get referenced in the project\n\n1. Android:   Worklight.Android.dll and Worklight.Xamarin.Android.dll\n2.  iOS :  Worklight.iOS.dll and Worklight.Xamarin.iOS.dll\n\n## Sample Application Quickstart\n\n###Pre-requisites\n \r\n\r\n1.  You need a instance of the Worklight Server on the development machine.  Install Worklight CLI (Command line Interface) from the [ IBM Worklight download page](http://www.ibm.com/developerworks/mobile/worklight/download/cli.html)\r\n2.  Install the add-in\r\n\r\n###Open the samples in Xamarin Studio:\r\n\r\n1. Open Xamarin Studio.\r\n2. Create a new Solution and add a project to it\r\n3. Add this component from the component store\r\n4. Double-click on the IBM MobileFirst Component\r\n5. Navigate to the **Samples** tab\r\n3. Open the sample\r\n\r\n###Prepare the MobileFirst Server\r\n\r\n1.  From the add-in - click on **Start Server** - 1. this command might take some time the first time you run it.\r\n2.  Click on **Open Console** and log into the console, by using the following credentials: username =  admin, and password =  admin\r\n3.  You now see two apps and a SampleHTTPAdapter in the console\r\n4.  Run the app in the simulator/real device\n\n\n###Configure and run the iOS Sample\n\n1. Right-click the **WorklightSample.iOS** project and select **Set As Startup Project**\n2. Expand the **Worklightsample.iOS** project and double-click the file **worklight.plist** to open it in the property value editor.\n3. In the property value editor find the entry for \"host\" and update its value to the \"Server host\" value.\n4. Run the sample project by clicking Xamarin menu **Run \u003e Start Debugging**\r\n\r\n###Using JSONStore in the Android Sample\r\n 1. To use the JSONStore API, Worklight SDK needs some native files. These need to be added to the project.\r\n   1. Android: Copy the files under \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\android\u003c SolutionName\u003e/jsonstore/assets to the **Assets** folder. Set the **BuildAction** for these files to **AndroidAsset**.\r\n   1. iOS: No action needed.\r\n\r\n##Additional Info\n\n###Known Issues\n\n Add-in\n \r\n 1. Depending on the developer environment, you might get a message that says: \"Error: Process Timed out\" when you start or stop the server from the add-in. Check whether the server is running as follows:\r\n  1. Open a command prompt or shell window\r\n  2. Type ``` wl status ```\r\n  3. Check that you can see ``` Server worklight is running. Server worklight is listening on port 10080.```\n\nWorklight CLI\n\n1. You might get a message that says: \"Cannot find module generator-worklight.\". To resolve this error, upgrade the Worklight CLI with the patch, or install the latest version of the CLI. For more information see detailed [discussion on Stackoverflow](http://stackoverflow.com/questions/26136870/is-worklight-cli-installer-broken) .\n\n###Appendix I\n\nSample Commands for  Worklight CLI.\n\n    wl create-server\n    wl create \u003csolutionName\u003e\nFrom within the  \u0026lt;solutionName\u0026gt;  directory\r\n\n    wl add api \u003csolutionName\u003eAndroid -e android\n    wl add api \u003csolutionName\u003eiOS -e ios\n    wl start\n    wl build\n    wl deploy\n    wl stop\n    wl status\n\nFor a full list of the CLI commands see the topic [Overview of Worklight CLI commands](http://www-01.ibm.com/support/knowledgecenter/SSZH4A_6.2.0/com.ibm.worklight.dev.doc/dev/r_wl_cli_commands.html) in the product documentation.\n\n###Appendix II\n\nTo setup a Xamarin development environment with Worklight Studio.\n\n 1. Install Worklight studio from the [IBM website](http://www.ibm.com/developerworks/mobile/worklight/download/studio.html)\n 2. Go to the **Servers** tab and Start the server\n 3. Click **File\u003eNew\u003eWorklight Project** with Project Template = Android;\n 4. Click **File\u003eNew\u003eWorklight Native API** with Environment = iOS\n 5. Right click on **App \u003eRun As\u003e deploy Native API**\n 6. Copy the wlclient.properties file and worklight.plist file\n\n","Hash":"dbe4acf0c0d870b00bba1506a1e15a8f","TargetPlatforms":["ios","android"],"TrialHash":null}